{"version":3,"sources":["ScrollView.tsx"],"names":["React","Animated","IS_IOS","useAfterMountEffect","useChainCallback","useCollapsibleStyle","useScrollHandlerY","useSharedAnimatedRef","useTabNameContext","useTabsContext","useUpdateScrollViewContentSize","ScrollView","forwardRef","contentContainerStyle","style","onContentSizeChange","children","rest","passRef","name","ref","setRef","contentInset","scrollYCurrent","_style","_contentContainerStyle","canBindScrollEvent","setCanBindScrollEvent","useState","scrollHandler","enabled","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","top","y","value","x"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,cAPF,EAQEC,8BARF,QASO,SATP;AAWA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,gBAAGX,KAAK,CAACY,UAAN,CAIxB,CACE;AAAEC,EAAAA,qBAAF;AAAyBC,EAAAA,KAAzB;AAAgCC,EAAAA,mBAAhC;AAAqDC,EAAAA,QAArD;AAA+D,KAAGC;AAAlE,CADF,EAEEC,OAFF,KAGK;AACH,QAAMC,IAAI,GAAGX,iBAAiB,EAA9B;AACA,QAAMY,GAAG,GAAGb,oBAAoB,CAAeW,OAAf,CAAhC;AACA,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAA2Cd,cAAc,EAA/D;AACA,QAAM;AACJK,IAAAA,KAAK,EAAEU,MADH;AAEJX,IAAAA,qBAAqB,EAAEY;AAFnB,MAGFpB,mBAAmB,EAHvB;AAIA,QAAM,CAACqB,kBAAD,EAAqBC,qBAArB,IAA8C3B,KAAK,CAAC4B,QAAN,CAAe,KAAf,CAApD;AAEAzB,EAAAA,mBAAmB,CAAC,MAAM;AACxB;AACA;AACAwB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAJkB,CAAnB;AAMA,QAAME,aAAa,GAAGvB,iBAAiB,CAACa,IAAD,EAAO;AAC5CW,IAAAA,OAAO,EAAEJ;AADmC,GAAP,CAAvC;AAIA1B,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBV,IAAAA,MAAM,CAACF,IAAD,EAAOC,GAAP,CAAN;AACD,GAFD,EAEG,CAACD,IAAD,EAAOC,GAAP,EAAYC,MAAZ,CAFH;AAIA,QAAMW,uBAAuB,GAAGtB,8BAA8B,CAAC;AAC7DS,IAAAA;AAD6D,GAAD,CAA9D;AAIA,QAAMc,+BAA+B,GAAG7B,gBAAgB,CACtD4B,uBADsD,EAEtDjB,mBAFsD,CAAxD;AAKA,sBACE,oBAAC,QAAD,CAAU,UAAV,eACME,IADN;AAEE;AACA,IAAA,GAAG,EAAEG,GAHP;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAE,CAACI,MAAD,EAASV,KAAT,CALT;AAME,IAAA,qBAAqB,EAAE,CACrBW,sBADqB,EAErB;AACAZ,IAAAA,qBAHqB,CANzB;AAWE,IAAA,QAAQ,EAAEgB,aAXZ;AAYE,IAAA,mBAAmB,EAAEI,+BAZvB;AAaE,IAAA,mBAAmB,EAAE,EAbvB;AAcE,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAEZ;AAAP,KAdhB;AAeE,IAAA,aAAa,EAAE;AACba,MAAAA,CAAC,EAAEjC,MAAM,GAAG,CAACoB,YAAD,GAAgBC,cAAc,CAACa,KAAlC,GAA0C,CADtC;AAEbC,MAAAA,CAAC,EAAE;AAFU,KAfjB;AAmBE,IAAA,gCAAgC,EAAE;AAnBpC,MAqBGrB,QArBH,CADF;AAyBD,CAjEuB,CAAnB","sourcesContent":["import React from 'react'\nimport { ScrollViewProps, ScrollView as RNScrollView } from 'react-native'\nimport Animated from 'react-native-reanimated'\n\nimport { IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\n/**\n * Use like a regular ScrollView.\n */\nexport const ScrollView = React.forwardRef<\n  RNScrollView,\n  React.PropsWithChildren<Omit<ScrollViewProps, 'onScroll'>>\n>(\n  (\n    { contentContainerStyle, style, onContentSizeChange, children, ...rest },\n    passRef\n  ) => {\n    const name = useTabNameContext()\n    const ref = useSharedAnimatedRef<RNScrollView>(passRef)\n    const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n    const {\n      style: _style,\n      contentContainerStyle: _contentContainerStyle,\n    } = useCollapsibleStyle()\n    const [canBindScrollEvent, setCanBindScrollEvent] = React.useState(false)\n\n    useAfterMountEffect(() => {\n      // we enable the scroll event after mounting\n      // otherwise we get an `onScroll` call with the initial scroll position which can break things\n      setCanBindScrollEvent(true)\n    })\n\n    const scrollHandler = useScrollHandlerY(name, {\n      enabled: canBindScrollEvent,\n    })\n\n    React.useEffect(() => {\n      setRef(name, ref)\n    }, [name, ref, setRef])\n\n    const scrollContentSizeChange = useUpdateScrollViewContentSize({\n      name,\n    })\n\n    const scrollContentSizeChangeHandlers = useChainCallback(\n      scrollContentSizeChange,\n      onContentSizeChange\n    )\n\n    return (\n      <Animated.ScrollView\n        {...rest}\n        // @ts-expect-error reanimated types are broken on ref\n        ref={ref}\n        bouncesZoom={false}\n        style={[_style, style]}\n        contentContainerStyle={[\n          _contentContainerStyle,\n          // TODO: investigate types\n          contentContainerStyle as any,\n        ]}\n        onScroll={scrollHandler}\n        onContentSizeChange={scrollContentSizeChangeHandlers}\n        scrollEventThrottle={16}\n        contentInset={{ top: contentInset }}\n        contentOffset={{\n          y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n          x: 0,\n        }}\n        automaticallyAdjustContentInsets={false}\n      >\n        {children}\n      </Animated.ScrollView>\n    )\n  }\n)\n"]}