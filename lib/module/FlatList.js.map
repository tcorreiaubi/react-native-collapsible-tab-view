{"version":3,"sources":["FlatList.tsx"],"names":["React","AnimatedFlatList","IS_IOS","useAfterMountEffect","useChainCallback","useCollapsibleStyle","useScrollHandlerY","useSharedAnimatedRef","useTabNameContext","useTabsContext","useUpdateScrollViewContentSize","FlatListImpl","contentContainerStyle","style","onContentSizeChange","rest","passRef","name","setRef","contentInset","scrollYCurrent","ref","canBindScrollEvent","setCanBindScrollEvent","useState","scrollHandler","enabled","_style","_contentContainerStyle","progressViewOffset","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","top","y","value","x","FlatList","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,EAA2BC,MAA3B,QAAyC,WAAzC;AACA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,cAPF,EAQEC,8BARF,QASO,SATP;;AAWA,SAASC,YAAT,CACE;AACEC,EAAAA,qBADF;AAEEC,EAAAA,KAFF;AAGEC,EAAAA,mBAHF;AAIE,KAAGC;AAJL,CADF,EAOEC,OAPF,EAQsB;AACpB,QAAMC,IAAI,GAAGT,iBAAiB,EAA9B;AACA,QAAM;AAAEU,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAA2CX,cAAc,EAA/D;AACA,QAAMY,GAAG,GAAGd,oBAAoB,CAAsBS,OAAtB,CAAhC;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CvB,KAAK,CAACwB,QAAN,CAAe,KAAf,CAApD;AAEArB,EAAAA,mBAAmB,CAAC,MAAM;AACxB;AACA;AACAoB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAJkB,CAAnB;AAMA,QAAME,aAAa,GAAGnB,iBAAiB,CAACW,IAAD,EAAO;AAAES,IAAAA,OAAO,EAAEJ;AAAX,GAAP,CAAvC;AACA,QAAM;AACJT,IAAAA,KAAK,EAAEc,MADH;AAEJf,IAAAA,qBAAqB,EAAEgB,sBAFnB;AAGJC,IAAAA;AAHI,MAIFxB,mBAAmB,EAJvB;AAMAL,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,MAAM;AACpBZ,IAAAA,MAAM,CAACD,IAAD,EAAOI,GAAP,CAAN;AACD,GAFD,EAEG,CAACJ,IAAD,EAAOI,GAAP,EAAYH,MAAZ,CAFH;AAIA,QAAMa,uBAAuB,GAAGrB,8BAA8B,CAAC;AAC7DO,IAAAA;AAD6D,GAAD,CAA9D;AAIA,QAAMe,+BAA+B,GAAG5B,gBAAgB,CACtD2B,uBADsD,EAEtDjB,mBAFsD,CAAxD;AAKA,sBACE,oBAAC,gBAAD,eACMC,IADN;AAEE;AACA,IAAA,GAAG,EAAEM,GAHP;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAE,CAACM,MAAD,EAASd,KAAT,CALT;AAME,IAAA,qBAAqB,EAAE,CAACe,sBAAD,EAAyBhB,qBAAzB,CANzB;AAOE,IAAA,kBAAkB,EAAEiB,kBAPtB;AAQE,IAAA,QAAQ,EAAEJ,aARZ;AASE,IAAA,mBAAmB,EAAEO,+BATvB;AAUE,IAAA,mBAAmB,EAAE,EAVvB;AAWE,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAEd;AAAP,KAXhB;AAYE,IAAA,aAAa,EAAE;AACbe,MAAAA,CAAC,EAAEhC,MAAM,GAAG,CAACiB,YAAD,GAAgBC,cAAc,CAACe,KAAlC,GAA0C,CADtC;AAEbC,MAAAA,CAAC,EAAE;AAFU,KAZjB;AAgBE,IAAA,gCAAgC,EAAE;AAhBpC,KADF;AAoBD;AAED;AACA;AACA;;;AACA,OAAO,MAAMC,QAAQ,gBAAGrC,KAAK,CAACsC,UAAN,CAAiB3B,YAAjB,CAAjB","sourcesContent":["import React from 'react'\nimport { FlatList as RNFlatList, FlatListProps } from 'react-native'\n\nimport { AnimatedFlatList, IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\nfunction FlatListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    ...rest\n  }: Omit<FlatListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNFlatList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n  const ref = useSharedAnimatedRef<RNFlatList<unknown>>(passRef)\n  const [canBindScrollEvent, setCanBindScrollEvent] = React.useState(false)\n\n  useAfterMountEffect(() => {\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    setCanBindScrollEvent(true)\n  })\n\n  const scrollHandler = useScrollHandlerY(name, { enabled: canBindScrollEvent })\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback(\n    scrollContentSizeChange,\n    onContentSizeChange\n  )\n\n  return (\n    <AnimatedFlatList\n      {...rest}\n      // @ts-expect-error problem with reanimated types, they're missing `ref`\n      ref={ref}\n      bouncesZoom={false}\n      style={[_style, style]}\n      contentContainerStyle={[_contentContainerStyle, contentContainerStyle]}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={{ top: contentInset }}\n      contentOffset={{\n        y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n        x: 0,\n      }}\n      automaticallyAdjustContentInsets={false}\n    />\n  )\n}\n\n/**\n * Use like a regular FlatList.\n */\nexport const FlatList = React.forwardRef(FlatListImpl) as <T>(\n  p: FlatListProps<T> & { ref?: React.Ref<RNFlatList<T>> }\n) => React.ReactElement\n"]}