{"version":3,"sources":["Lazy.tsx"],"names":["Lazy","children","startMounted","cancelLazyFadeIn","name","focusedTab","refMap","scrollY","tabNames","canMount","setCanMount","React","useState","afterMount","setAfterMount","isSelfMounted","useRef","opacity","useEffect","current","allowToMount","useCallback","setTimeout","value","focused","scrollTo","ref","tabIndex","findIndex","n","stylez","styles","container","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet } from 'react-native'\nimport Animated, {\n  useSharedValue,\n  useAnimatedReaction,\n  runOnJS,\n  useDerivedValue,\n  withTiming,\n  useAnimatedStyle,\n} from 'react-native-reanimated'\n\nimport { ScrollView } from './ScrollView'\nimport { useScroller, useTabNameContext, useTabsContext } from './hooks'\n\n/**\n * Typically used internally, but if you want to mix lazy and regular screens you can wrap the lazy ones with this component.\n */\nexport const Lazy: React.FC<{\n  startMounted?: boolean\n  cancelLazyFadeIn?: boolean\n  children: React.ReactElement\n}> = ({ children, startMounted, cancelLazyFadeIn }) => {\n  const name = useTabNameContext()\n  const { focusedTab, refMap, scrollY, tabNames } = useTabsContext()\n  const [canMount, setCanMount] = React.useState(!!startMounted)\n  const [afterMount, setAfterMount] = React.useState(!!startMounted)\n  const isSelfMounted = React.useRef(true)\n\n  const opacity = useSharedValue(\n    cancelLazyFadeIn || startMounted ? 1 : 0,\n    false\n  )\n\n  React.useEffect(() => {\n    return () => {\n      isSelfMounted.current = false\n    }\n  }, [])\n\n  const allowToMount = React.useCallback(() => {\n    // wait the scene to be at least 50 ms focused, before mounting\n    setTimeout(() => {\n      if (focusedTab.value === name) {\n        if (isSelfMounted.current) setCanMount(true)\n        // we need to wait for the children rendering to complete so that we can scroll properly\n        setTimeout(() => {\n          if (isSelfMounted.current) setAfterMount(true)\n        }, 10)\n      }\n    }, 50)\n  }, [focusedTab.value, name])\n\n  useAnimatedReaction(\n    () => {\n      return focusedTab.value === name\n    },\n    (focused) => {\n      if (focused && !canMount) {\n        runOnJS(allowToMount)()\n      }\n    },\n    [canMount, focusedTab]\n  )\n\n  const scrollTo = useScroller()\n\n  const ref = name ? refMap[name] : null\n\n  useDerivedValue(() => {\n    if (afterMount) {\n      const tabIndex = tabNames.value.findIndex((n) => n === name)\n      if (ref && tabIndex >= 0) {\n        scrollTo(ref, 0, scrollY.value[tabIndex], false, `[${name}] lazy sync`)\n      }\n      if (!cancelLazyFadeIn && opacity.value !== 1)\n        opacity.value = withTiming(1)\n    }\n  }, [ref, cancelLazyFadeIn, opacity, name, afterMount, tabNames, scrollTo])\n\n  const stylez = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value,\n    }\n  }, [])\n\n  return canMount ? (\n    cancelLazyFadeIn ? (\n      children\n    ) : (\n      <Animated.View\n        pointerEvents=\"box-none\"\n        style={[styles.container, !cancelLazyFadeIn && stylez]}\n      >\n        {children}\n      </Animated.View>\n    )\n  ) : (\n    <ScrollView />\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n})\n"]}