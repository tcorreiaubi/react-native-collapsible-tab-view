{"version":3,"sources":["FlatList.tsx"],"names":["FlatListImpl","contentContainerStyle","style","onContentSizeChange","rest","passRef","name","setRef","contentInset","scrollYCurrent","ref","canBindScrollEvent","setCanBindScrollEvent","React","useState","scrollHandler","enabled","_style","_contentContainerStyle","progressViewOffset","useEffect","scrollContentSizeChange","scrollContentSizeChangeHandlers","top","y","IS_IOS","value","x","FlatList","forwardRef"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;;;;;AAWA,SAASA,YAAT,CACE;AACEC,EAAAA,qBADF;AAEEC,EAAAA,KAFF;AAGEC,EAAAA,mBAHF;AAIE,KAAGC;AAJL,CADF,EAOEC,OAPF,EAQsB;AACpB,QAAMC,IAAI,GAAG,+BAAb;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,MAA2C,4BAAjD;AACA,QAAMC,GAAG,GAAG,iCAA0CL,OAA1C,CAAZ;;AACA,QAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CC,eAAMC,QAAN,CAAe,KAAf,CAApD;;AAEA,kCAAoB,MAAM;AACxB;AACA;AACAF,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAJD;AAMA,QAAMG,aAAa,GAAG,8BAAkBT,IAAlB,EAAwB;AAAEU,IAAAA,OAAO,EAAEL;AAAX,GAAxB,CAAtB;AACA,QAAM;AACJT,IAAAA,KAAK,EAAEe,MADH;AAEJhB,IAAAA,qBAAqB,EAAEiB,sBAFnB;AAGJC,IAAAA;AAHI,MAIF,iCAJJ;;AAMAN,iBAAMO,SAAN,CAAgB,MAAM;AACpBb,IAAAA,MAAM,CAACD,IAAD,EAAOI,GAAP,CAAN;AACD,GAFD,EAEG,CAACJ,IAAD,EAAOI,GAAP,EAAYH,MAAZ,CAFH;;AAIA,QAAMc,uBAAuB,GAAG,2CAA+B;AAC7Df,IAAAA;AAD6D,GAA/B,CAAhC;AAIA,QAAMgB,+BAA+B,GAAG,6BACtCD,uBADsC,EAEtClB,mBAFsC,CAAxC;AAKA,sBACE,6BAAC,yBAAD,eACMC,IADN;AAEE;AACA,IAAA,GAAG,EAAEM,GAHP;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,KAAK,EAAE,CAACO,MAAD,EAASf,KAAT,CALT;AAME,IAAA,qBAAqB,EAAE,CAACgB,sBAAD,EAAyBjB,qBAAzB,CANzB;AAOE,IAAA,kBAAkB,EAAEkB,kBAPtB;AAQE,IAAA,QAAQ,EAAEJ,aARZ;AASE,IAAA,mBAAmB,EAAEO,+BATvB;AAUE,IAAA,mBAAmB,EAAE,EAVvB;AAWE,IAAA,YAAY,EAAE;AAAEC,MAAAA,GAAG,EAAEf;AAAP,KAXhB;AAYE,IAAA,aAAa,EAAE;AACbgB,MAAAA,CAAC,EAAEC,kBAAS,CAACjB,YAAD,GAAgBC,cAAc,CAACiB,KAAxC,GAAgD,CADtC;AAEbC,MAAAA,CAAC,EAAE;AAFU,KAZjB;AAgBE,IAAA,gCAAgC,EAAE;AAhBpC,KADF;AAoBD;AAED;AACA;AACA;;;AACO,MAAMC,QAAQ,gBAAGf,eAAMgB,UAAN,CAAiB7B,YAAjB,CAAjB","sourcesContent":["import React from 'react'\nimport { FlatList as RNFlatList, FlatListProps } from 'react-native'\n\nimport { AnimatedFlatList, IS_IOS } from './helpers'\nimport {\n  useAfterMountEffect,\n  useChainCallback,\n  useCollapsibleStyle,\n  useScrollHandlerY,\n  useSharedAnimatedRef,\n  useTabNameContext,\n  useTabsContext,\n  useUpdateScrollViewContentSize,\n} from './hooks'\n\nfunction FlatListImpl<R>(\n  {\n    contentContainerStyle,\n    style,\n    onContentSizeChange,\n    ...rest\n  }: Omit<FlatListProps<R>, 'onScroll'>,\n  passRef: React.Ref<RNFlatList>\n): React.ReactElement {\n  const name = useTabNameContext()\n  const { setRef, contentInset, scrollYCurrent } = useTabsContext()\n  const ref = useSharedAnimatedRef<RNFlatList<unknown>>(passRef)\n  const [canBindScrollEvent, setCanBindScrollEvent] = React.useState(false)\n\n  useAfterMountEffect(() => {\n    // we enable the scroll event after mounting\n    // otherwise we get an `onScroll` call with the initial scroll position which can break things\n    setCanBindScrollEvent(true)\n  })\n\n  const scrollHandler = useScrollHandlerY(name, { enabled: canBindScrollEvent })\n  const {\n    style: _style,\n    contentContainerStyle: _contentContainerStyle,\n    progressViewOffset,\n  } = useCollapsibleStyle()\n\n  React.useEffect(() => {\n    setRef(name, ref)\n  }, [name, ref, setRef])\n\n  const scrollContentSizeChange = useUpdateScrollViewContentSize({\n    name,\n  })\n\n  const scrollContentSizeChangeHandlers = useChainCallback(\n    scrollContentSizeChange,\n    onContentSizeChange\n  )\n\n  return (\n    <AnimatedFlatList\n      {...rest}\n      // @ts-expect-error problem with reanimated types, they're missing `ref`\n      ref={ref}\n      bouncesZoom={false}\n      style={[_style, style]}\n      contentContainerStyle={[_contentContainerStyle, contentContainerStyle]}\n      progressViewOffset={progressViewOffset}\n      onScroll={scrollHandler}\n      onContentSizeChange={scrollContentSizeChangeHandlers}\n      scrollEventThrottle={16}\n      contentInset={{ top: contentInset }}\n      contentOffset={{\n        y: IS_IOS ? -contentInset + scrollYCurrent.value : 0,\n        x: 0,\n      }}\n      automaticallyAdjustContentInsets={false}\n    />\n  )\n}\n\n/**\n * Use like a regular FlatList.\n */\nexport const FlatList = React.forwardRef(FlatListImpl) as <T>(\n  p: FlatListProps<T> & { ref?: React.Ref<RNFlatList<T>> }\n) => React.ReactElement\n"]}